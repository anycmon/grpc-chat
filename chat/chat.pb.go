// Code generated by protoc-gen-go.
// source: chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	Empty
	Room
	User
	News
	Error
	RoomCredentials
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Room struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Room) Reset()                    { *m = Room{} }
func (m *Room) String() string            { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()               {}
func (*Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Room) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Room) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type User struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type News struct {
	SenderId string `protobuf:"bytes,1,opt,name=senderId" json:"senderId,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=roomId" json:"roomId,omitempty"`
	Msg      string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *News) Reset()                    { *m = News{} }
func (m *News) String() string            { return proto.CompactTextString(m) }
func (*News) ProtoMessage()               {}
func (*News) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *News) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *News) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *News) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Error struct {
	Code bool   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Error) GetCode() bool {
	if m != nil {
		return m.Code
	}
	return false
}

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type RoomCredentials struct {
	Room *Room `protobuf:"bytes,1,opt,name=room" json:"room,omitempty"`
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *RoomCredentials) Reset()                    { *m = RoomCredentials{} }
func (m *RoomCredentials) String() string            { return proto.CompactTextString(m) }
func (*RoomCredentials) ProtoMessage()               {}
func (*RoomCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RoomCredentials) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *RoomCredentials) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "chat.Empty")
	proto.RegisterType((*Room)(nil), "chat.Room")
	proto.RegisterType((*User)(nil), "chat.User")
	proto.RegisterType((*News)(nil), "chat.News")
	proto.RegisterType((*Error)(nil), "chat.Error")
	proto.RegisterType((*RoomCredentials)(nil), "chat.RoomCredentials")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	Connect(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Disconnect(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	Rooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Chat_RoomsClient, error)
	RoomUsers(ctx context.Context, in *Room, opts ...grpc.CallOption) (Chat_RoomUsersClient, error)
	JoinRoom(ctx context.Context, in *RoomCredentials, opts ...grpc.CallOption) (*Empty, error)
	LeaveRoom(ctx context.Context, in *RoomCredentials, opts ...grpc.CallOption) (*Empty, error)
	ExchangeMessages(ctx context.Context, opts ...grpc.CallOption) (Chat_ExchangeMessagesClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Connect(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/chat.Chat/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Disconnect(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.Chat/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Rooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Chat_RoomsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/chat.Chat/Rooms", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRoomsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_RoomsClient interface {
	Recv() (*Room, error)
	grpc.ClientStream
}

type chatRoomsClient struct {
	grpc.ClientStream
}

func (x *chatRoomsClient) Recv() (*Room, error) {
	m := new(Room)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) RoomUsers(ctx context.Context, in *Room, opts ...grpc.CallOption) (Chat_RoomUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[1], c.cc, "/chat.Chat/RoomUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRoomUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_RoomUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type chatRoomUsersClient struct {
	grpc.ClientStream
}

func (x *chatRoomUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) JoinRoom(ctx context.Context, in *RoomCredentials, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.Chat/JoinRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) LeaveRoom(ctx context.Context, in *RoomCredentials, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.Chat/LeaveRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ExchangeMessages(ctx context.Context, opts ...grpc.CallOption) (Chat_ExchangeMessagesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[2], c.cc, "/chat.Chat/ExchangeMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatExchangeMessagesClient{stream}
	return x, nil
}

type Chat_ExchangeMessagesClient interface {
	Send(*News) error
	Recv() (*News, error)
	grpc.ClientStream
}

type chatExchangeMessagesClient struct {
	grpc.ClientStream
}

func (x *chatExchangeMessagesClient) Send(m *News) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatExchangeMessagesClient) Recv() (*News, error) {
	m := new(News)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chat service

type ChatServer interface {
	Connect(context.Context, *User) (*User, error)
	Disconnect(context.Context, *User) (*Empty, error)
	Rooms(*Empty, Chat_RoomsServer) error
	RoomUsers(*Room, Chat_RoomUsersServer) error
	JoinRoom(context.Context, *RoomCredentials) (*Empty, error)
	LeaveRoom(context.Context, *RoomCredentials) (*Empty, error)
	ExchangeMessages(Chat_ExchangeMessagesServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Connect(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Disconnect(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Rooms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).Rooms(m, &chatRoomsServer{stream})
}

type Chat_RoomsServer interface {
	Send(*Room) error
	grpc.ServerStream
}

type chatRoomsServer struct {
	grpc.ServerStream
}

func (x *chatRoomsServer) Send(m *Room) error {
	return x.ServerStream.SendMsg(m)
}

func _Chat_RoomUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Room)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).RoomUsers(m, &chatRoomUsersServer{stream})
}

type Chat_RoomUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type chatRoomUsersServer struct {
	grpc.ServerStream
}

func (x *chatRoomUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Chat_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).JoinRoom(ctx, req.(*RoomCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/LeaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).LeaveRoom(ctx, req.(*RoomCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ExchangeMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).ExchangeMessages(&chatExchangeMessagesServer{stream})
}

type Chat_ExchangeMessagesServer interface {
	Send(*News) error
	Recv() (*News, error)
	grpc.ServerStream
}

type chatExchangeMessagesServer struct {
	grpc.ServerStream
}

func (x *chatExchangeMessagesServer) Send(m *News) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatExchangeMessagesServer) Recv() (*News, error) {
	m := new(News)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Chat_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Chat_Disconnect_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _Chat_JoinRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _Chat_LeaveRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rooms",
			Handler:       _Chat_Rooms_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RoomUsers",
			Handler:       _Chat_RoomUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExchangeMessages",
			Handler:       _Chat_ExchangeMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0xdd, 0x4a, 0xf3, 0x40,
	0x10, 0x4d, 0xd2, 0xf4, 0x6f, 0x0a, 0xdf, 0x57, 0x06, 0x94, 0x92, 0x0b, 0x91, 0x55, 0xb0, 0x08,
	0x96, 0x58, 0x1f, 0xa1, 0xf6, 0xa2, 0x52, 0x05, 0x03, 0x3e, 0x40, 0x4c, 0x86, 0x1a, 0x30, 0xbb,
	0x65, 0x37, 0xfe, 0xbd, 0x9a, 0x4f, 0xe7, 0xee, 0xb6, 0x49, 0x56, 0xf1, 0xc6, 0xbb, 0x93, 0x33,
	0x67, 0xce, 0x9c, 0x99, 0x0d, 0x40, 0xf6, 0x94, 0x56, 0xb3, 0xad, 0x14, 0x95, 0xc0, 0xd0, 0x60,
	0xd6, 0x87, 0xee, 0xb2, 0xdc, 0x56, 0x1f, 0xec, 0x1c, 0xc2, 0x44, 0x88, 0x12, 0xff, 0x41, 0x50,
	0xe4, 0x13, 0xff, 0xd8, 0x9f, 0x0e, 0x13, 0x8d, 0x10, 0x21, 0xe4, 0x69, 0x49, 0x93, 0xc0, 0x32,
	0x16, 0x1b, 0xed, 0x83, 0x22, 0xd9, 0xd4, 0xfc, 0xb6, 0xb6, 0xef, 0x0f, 0xea, 0x7e, 0xb6, 0x86,
	0xf0, 0x8e, 0xde, 0x14, 0x46, 0x30, 0x50, 0xc4, 0x73, 0x92, 0xab, 0xda, 0xbd, 0xf9, 0xc6, 0x43,
	0xe8, 0x49, 0x3d, 0x7b, 0x55, 0xf7, 0xed, 0xbf, 0x70, 0x0c, 0x9d, 0x52, 0x6d, 0x26, 0x1d, 0x4b,
	0x1a, 0xc8, 0x2e, 0x74, 0x5c, 0x29, 0x85, 0x1d, 0x9d, 0x89, 0x7c, 0x37, 0x7a, 0x90, 0x58, 0x5c,
	0xcb, 0x83, 0x56, 0x7e, 0x0f, 0xff, 0xcd, 0x52, 0x0b, 0x49, 0x39, 0xf1, 0xaa, 0x48, 0x9f, 0x15,
	0x1e, 0x41, 0x68, 0xdc, 0x6d, 0xe3, 0x68, 0x0e, 0x33, 0x7b, 0x11, 0x23, 0x4a, 0x2c, 0x6f, 0xea,
	0x2f, 0x7a, 0x37, 0xeb, 0xd2, 0xd4, 0xcd, 0xb6, 0x89, 0xe5, 0xe7, 0x9f, 0x01, 0x84, 0x0b, 0xcd,
	0xe1, 0x09, 0xf4, 0x17, 0x82, 0x73, 0xca, 0x2a, 0x74, 0x54, 0x91, 0x83, 0x99, 0x87, 0x67, 0x00,
	0xd7, 0x85, 0xca, 0x7e, 0xd1, 0x8d, 0x76, 0x78, 0x77, 0x7c, 0x0f, 0x4f, 0xa1, 0x6b, 0x42, 0x28,
	0x74, 0xf9, 0xc8, 0x89, 0xc7, 0xbc, 0xd8, 0xd7, 0x76, 0x43, 0x83, 0x8d, 0x81, 0x42, 0xa7, 0xf8,
	0x7d, 0xaa, 0x16, 0xc6, 0x30, 0xb8, 0x11, 0x05, 0xb7, 0x2f, 0x7a, 0xd0, 0xea, 0x9c, 0x43, 0xfc,
	0x0c, 0x70, 0x09, 0xc3, 0x35, 0xa5, 0xaf, 0xf4, 0x87, 0x96, 0x18, 0xc6, 0xcb, 0x77, 0xcd, 0xf0,
	0x0d, 0xdd, 0x92, 0x52, 0xe9, 0x86, 0x9a, 0x50, 0xe6, 0xc9, 0x23, 0x07, 0x33, 0x6f, 0xea, 0xc7,
	0xfe, 0x63, 0xcf, 0xfe, 0x7a, 0x57, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x85, 0x4f, 0xc8,
	0x88, 0x02, 0x00, 0x00,
}
